{"version":3,"sources":["spacexlogo.svg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","console","log","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_esm","query","loading","error","data","launches","map","key","React","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","spaceXLogo","alt","style","width","display","margin","react_router","exact","path","component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.459552d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacexlogo.6ff54c0f.svg\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\n// yeah, I don't know why this tutorial used the classnames package either. Keeping the inline color styling code here just for demo purposes.\n// <span style={{ color: launch_success ? \"green\" : \"red\" }}>\n// \t{mission_name}\n\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n  console.log(launch_success);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:\n            <span\n              className={classNames({\n                \"text-success\": launch_success === true,\n                \"text-danger\": launch_success === false\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-DD-MM HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\n// make a query to graphql - notice how this is syntactically similar to what we were doing in the graphiql IDE\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\n// map through launch data, create a launch item using the data variable\nexport default class Launches extends React.Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.error(error);\n\n            return (\n              <Fragment>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default class Launch extends React.Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n\n    // because we're sending an argument into our query, we need to specifiy it in 'variables'\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.error(error);\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Flight Number: {flight_number}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Year: {launch_year}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Success:{\" \"}\n                    <span\n                      className={classNames({\n                        \"text-success\": launch_success === true,\n                        \"text-danger\": launch_success === false\n                      })}\n                    >\n                      {launch_success ? \"Yes\" : \"No\"}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">\n                    Rocket Name: {rocket_name}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Rocket Type: {rocket_type}\n                  </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n","// apollo-boost is package to set everything up\n// react-apollo is a view layer\n// graphQL of course is used to parse our queries\n\nimport React from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport spaceXLogo from \"./spacexlogo.svg\";\n\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n// like Redux, Apollo gives us a Provider component to wrap our app in. Then we pass in our client\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={spaceXLogo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}